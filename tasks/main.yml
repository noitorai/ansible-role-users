---
# tasks file for users

- name: extract groups from users_generic_group_list
  set_fact:
    grouplist: |
      {% set l = [] %}
      {% for i in users_group_list %}
      {%   set _ = l.extend(users_generic_group_list |selectattr('name','match','^' + i + '$') |list) %}
      {% endfor %}
      {{ l }}

- name: extract users from users_generic_user_list
  set_fact:
    userlist: |
      {% set l = [] %}
      {% for i in users_user_list %}
      {%   set _ = l.extend(users_generic_user_list |selectattr('name','match','^' + i + '$') |list) %}
      {% endfor %}
      {{ l }}

- name: add group
  group:
    name: '{{ item.name }}'
    gid: '{{ item.gid }}'
    state: '{{ item.state | default("present") }}'
  with_flattened:
    - "{{ grouplist }}"
    - "{{ users_extra_group_list }}"

- name: add user
  user:
    name:       '{{ item.name }}'
    uid:        '{{ item.uid }}'
    comment:    '{{ item.comment | default(omit) }}'
    state:      '{{ item.state | default("present") }}'
    group:      '{{ item.group | default(omit) }}'
    groups:     '{{ item.groups | default(omit) }}'
    append:     '{{ item.append | default("yes") }}'
    createhome: '{{ item.createhome | default("yes") }}'
    force:      '{{ item.force | default("no") }}'
    home:       '{{ item.home | default(omit) }}'
    move_home:  '{{ item.move_home | default("no") }}'
    password:   '{{ users_passwords[item.name] | default(omit) }}'
    remove:     '{{ item.remove | default("no") }}'
    shell:      '{{ item.shell | default(omit) }}'
    update_password: '{{ item.update_password | default("on_create") }}'
  with_flattened:
    - "{{ userlist }}"
    - "{{ users_extra_user_list }}"

- name: deply authorized_keys
  authorized_key:
    user:  "{{ item.name }}"
    key:   "{{ lookup('file', users_authorized_keys_dir + '/' + item.name) }}"
    state: "present"
  when: item.authorized_keys is defined and item.authorized_keys
  with_flattened:
    - "{{ userlist }}"
    - "{{ users_extra_user_list }}"
  ignore_errors: yes

- name: check if sudo user or group exists
  set_fact:
    sudouser_exists:  "{{ true in (userlist |union(users_extra_user_list) |rejectattr('sudo', 'undefined') |map(attribute='sudo') |list) }}"
    sudogroup_exists: "{{ true in (grouplist |union(users_extra_group_list) |rejectattr('sudo', 'undefined') |map(attribute='sudo') |list) }}"

- name: sudoers configuration
  template:
    src:    sudoers_template.j2
    dest:   "/etc/sudoers.d/{{ users_sudoers_filename }}"
    owner:  root
    group:  root
    mode:   "0440"
