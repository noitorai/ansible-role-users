---
# tasks file for users

- name: add group
  group: name={{ item.name }} gid={{ item.gid }}
  with_items: "{{ users_group_list }}"

- name: add extra group
  group: name={{ item.name }} gid={{ item.gid }}
  with_items: "{{ users_extra_group_list }}"
  
  
- name: extract users from users_generic_user_list
  set_fact:
    userinfo: "{{ users_generic_user_list |selectattr('name','match','^' + item + '$') |list }}"
  register: userlist_raw
  with_items: "{{ users_username_list }}"

- name: add generic user
  user:
    name:       "{{ item.ansible_facts.userinfo[0].name }}"
    uid:        "{{ item.ansible_facts.userinfo[0].uid }}"
    comment:    '{{ item.ansible_facts.userinfo[0].comment | default(omit) }}'
    state:      '{{ item.ansible_facts.userinfo[0].state | default("present") }}'
    group:      "{{ item.ansible_facts.userinfo[0].group }}"
    groups:     '{{ item.ansible_facts.userinfo[0].groups | default(omit) }}'
    append:     '{{ item.ansible_facts.userinfo[0].append | default("yes") }}'
    createhome: '{{ item.ansible_facts.userinfo[0].createhome | default("yes") }}'
    force:      '{{ item.ansible_facts.userinfo[0].force | default("no") }}'
    home:       '{{ item.ansible_facts.userinfo[0].home | default(omit) }}'
    move_home:  '{{ item.ansible_facts.userinfo[0].move_home | default("no") }}'
    password:   '{{ item.ansible_facts.userinfo[0].password | default(omit) }}'
    remove:     '{{ item.ansible_facts.userinfo[0].remove | default("no") }}'
    shell:      '{{ item.ansible_facts.userinfo[0].shell | default(omit) }}'
    update_password: '{{ item.ansible_facts.userinfo[0].update_password | default("on_create") }}'
  with_items: "{{ userlist_raw.results }}"

- name: add extra user
  user:
    name:       '{{ item.name }}'
    uid:        '{{ item.uid }}'
    comment:    '{{ item.comment | default(omit) }}'
    state:      '{{ item.state | default("present") }}'
    group:      '{{ item.group }}'
    groups:     '{{ item.groups | default(omit) }}'
    append:     '{{ item.append | default("yes") }}'
    createhome: '{{ item.createhome | default("yes") }}'
    force:      '{{ item.force | default("no") }}'
    home:       '{{ item.home | default(omit) }}'
    move_home:  '{{ item.move_home | default("no") }}'
    password:   '{{ item.password | default(omit) }}'
    remove:     '{{ item.remove | default("no") }}'
    shell:      '{{ item.shell | default(omit) }}'
    update_password: '{{ item.update_password | default("on_create") }}'
  with_items: "{{ users_extra_user_list }}"

- name: deply authorized_keys
  authorized_key:
    user:  "{{ item.ansible_facts.userinfo[0].name }}"
    key:   "{{ lookup('file', users_authorized_keys_dir + '/' + item.ansible_facts.userinfo[0].name) }}"
    state: "present"
  when: ( item.ansible_facts.userinfo[0].authorized_keys is defined ) and ( item.ansible_facts.userinfo[0].authorized_keys == "yes" )
  with_items: "{{ userlist_raw.results }}"

- name: sudoers configuration (group)
  template:
    src:    sudoers_group.j2
    dest:   "/etc/sudoers.d/{{ item.name }}"
    owner:  root
    group:  root
    mode:   0440
    backup: yes
  when: item.sudo is defined and item.sudo == "yes"
  with_items: "{{ users_group_list }}"
